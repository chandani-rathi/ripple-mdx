import Hello from './Hello.ripple.mdx';
import routes from 'virtual:ripple-routes';
import { Link, Loading, NotFound, Route, RouteContext } from 'ripple-router-hash';
import { createContext, effect, untrack } from 'ripple';

export function getHashPath() {
  return window.location.hash.replace(/^#/, "") || "/";
}

export function findRoute(currentPath, routes) {
  let route = null;
  for (const r of routes) {
    const params = matchPath(r.path, currentPath);
    if (params) {
		  route = { ...r, params};
	  }
  }
  if(route == null && routes.length > 0){
    const defaultLayout = routes[0].layouts;
    route = { layouts: defaultLayout}
  }
  return {...route, path: currentPath};
}

export function matchPath(pattern, pathname) {
  const patternParts = pattern.split("/").filter(Boolean);
  const pathParts = pathname.split("/").filter(Boolean);

  if (patternParts.length !== pathParts.length) return null;

  const params = {};
  for (let i = 0; i < patternParts.length; i++) {
    if (patternParts[i].startsWith(":")) {
      const key = patternParts[i].slice(1);
      params[key] = pathParts[i];
    } else if (patternParts[i] !== pathParts[i]) {
      return null;
    }
  }
  return params;
}


console.log('App Routes', routes);

export default component App() {
	let $currentPath = untrack(() => getHashPath());
	let $loading = true;
	let $newRoute = null;

	effect(() => {
		$loading = false;
		$newRoute = findRoute($currentPath, routes);
	});

	untrack(() => {
		RouteContext.set({
			documentTitle: document.title,
		});
	});

	effect(() => {
		const onPopState = () => {
			$currentPath = getHashPath();
		};
		window.addEventListener('hashchange', onPopState);

		return () => window.removeEventListener('hashchange', onPopState);
	});

	<div class='min-h-screen bg-gradient-to-br from-gray-100 to-white flex flex-row'>
		<aside class='max-w-1/4  p-8 max-h-screen overflow-auto border-r'>
			<h1 class='text-2xl font-semibold border-b'>{'Static Documentation Site'}</h1>
			<div class='m-4'><ul class='grid gap-4'>
				<li><Link $to='/'>{'Home'}</Link></li>
				<li><Link $to='/about'>{'About'}</Link></li>
			</ul></div>
		</aside>
		<content class='flex-1 flex flex-col p-8 max-h-screen overflow-auto'><article class='prose prose-stone lg:prose-lg xl:prose-xl max-w-none'>
			if ($loading) {
				<Loading />
			} else if (!$newRoute) {
				<NotFound />
			} else {
				<Route $route={$newRoute} />
			}
		</article></content>
	</div>
}